% createTuav.m
% this is supposed to create the time matrix for uav on the ugv graph
% INPUTS
% uavSites:
<<<<<<< HEAD
% ugvSites:
% corrdinatesOfSites:
% OUTPUTS
% uavOnUgvSiteTimes:

function [uavOnUgvSiteTimes] = createTuav(uavSites, ugvSites, corrdinatesOfSites, numOfUavSites)

j = 1;
tempAnswer = 0;
uavOnUgvSiteTimes = [];
=======
% ugvSites: 
% corrdinatesOfSites: 
% OUTPUTS
% uavOnUgvSiteTimes: 

function [uavOnUgvSiteTimes] = createTuav(uavSites, ugvSites, corrdinatesOfSites)

>>>>>>> fd0c9d16c5dfa1dba66ce4761f6f8e459703648a

for i = 1:numOfUavSites-1
    tempPoint = [corrdinatesOfSites(:,uavSites(i))'; corrdinatesOfSites(:,uavSites(i+1))'];
    tempDistance = pdist(tempPoint, 'euclidean');
    tempAnswer = tempDistance + tempAnswer;
    if i+1 == ugvSites(j)
        uavOnUgvSiteTimes(end+1) = tempAnswer;
        tempAnswer = 0;
        j = j+1;
    end
end

<<<<<<< HEAD
numOfUgvSites = numel(ugvSites);
for i = 1:numOfUgvSites
    for j = 1:numOfUavSites
        tempPoint = [corrdinatesOfSites(:,uavSites(j))'; corrdinatesOfSites(:,uavSites(j+1))'];
        tempDistance = pdist(tempPoint, 'euclidean');
        
    end
end
=======
ugvSitesDistances = zeros(numOfChargingSites);
for i = 1:numOfChargingSites
    for j = 1:numOfChargingSites
        tempPoint = [corrdinatesOfSites(:,ugvSites(i))'; corrdinatesOfSites(:,ugvSites(j))'];
        ugvSitesDistances(i, j) = pdist(tempPoint, 'euclidean');
    end
end

ugvSiteTimes = ugvSitesDistances ./ ugvSpeed;
>>>>>>> fd0c9d16c5dfa1dba66ce4761f6f8e459703648a


end

